#!/usr/bin/env node

const argv = require('minimist')(process.argv.slice(2))
const PNG = require('pngjs').PNG
const fs = require('fs')
const Hexasphere = require('hexasphere.js')

const map = argv.m
let radius = 30
let numDivisions = 35
let scale = 0.45

if (argv.r) radius = parseInt(argv.r)
if (argv.d) numDivisions = parseInt(argv.d)
if (argv.s) scale = parseFloat(argv.s)

const hexasphere = new Hexasphere(radius, numDivisions, scale)

const o = { tiles: [] }

const latLonToXY = function (width, height, lat, lon) {
  const x = Math.floor(width / 2.0 + (width / 360.0) * lon)
  const y = Math.floor(height / 2.0 + (height / 180.0) * lat)

  return { x, y }
}

const xyToIdx = function (x, y, width) {
  return (width * y + x) << 2
}

const rnd = function (num) {
  return Math.round(num * 100) / 100
}

fs.createReadStream(map)
  .pipe(
    new PNG({
      filterType: 4
    })
  )
  .on('parsed', function () {
    for (let i = 0; i < hexasphere.tiles.length; i++) {
      let count = 0
      for (let j = 0; j < hexasphere.tiles[i].boundary.length; j++) {
        let latLon = hexasphere.tiles[i].getLatLon(radius, j)
        let xy = latLonToXY(this.width, this.height, latLon.lat, latLon.lon)
        let idx = xyToIdx(xy.x, xy.y, this.width)
        count += 255 - this.data[idx]
      }

      latLon = hexasphere.tiles[i].getLatLon(radius)
      xy = latLonToXY(this.width, this.height, latLon.lat, latLon.lon)
      idx = xyToIdx(xy.x, xy.y, this.width)
      count += 255 - this.data[idx]

      const size = count / (hexasphere.tiles[i].boundary.length + 1) / 255

      if (size > 0.1) {
        /*
                var c = {
                    x: rnd(hexasphere.tiles[i].centerPoint.x),
                    y: rnd(hexasphere.tiles[i].centerPoint.y),
                    z: rnd(hexasphere.tiles[i].centerPoint.z)
                };
               */

        const tile = { lat: rnd(latLon.lat), lon: rnd(latLon.lon), b: [] }
        const scale = size - Math.random() * 0.25

        for (let j = 0; j < hexasphere.tiles[i].boundary.length; j++) {
          const newPoint = hexasphere.tiles[i].boundary[j].segment(
            hexasphere.tiles[i].centerPoint,
            size
          )
          tile.b.push({
            x: rnd(newPoint.x),
            y: rnd(newPoint.y),
            z: rnd(newPoint.z)
          })
        }

        o.tiles.push(tile)
      }
    }

    const output = `const tiles = ${JSON.stringify(o)}`

    if (argv.o) {
      var fs = require('fs')
      fs.writeFileSync(argv.o, output)
    } else console.log(output)
  })
